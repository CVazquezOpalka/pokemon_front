{"ast":null,"code":"export const filter = (array, type) => {\n  const arrayOriginal = array;\n  const arrayFiltros = arrayOriginal.filter(e => e.tipos.includes(type));\n  if (type) return arrayFiltros;else dispatch(updateType(\"\"));\n  return arrayOriginal;\n};\nconst sortPorNombre = function (array, getter) {\n  let order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"asc\";\n  array.sort((a, b) => {\n    const first = getter(a);\n    const second = getter(b);\n    const compare = first.localeCompare(second);\n    return order === \"asc\" ? compare : -compare;\n  });\n  return array;\n};\nexport const utils = (array, type, order) => {\n  const arrayOriginal = array;\n  const arrayDuplicado = [...array];\n  if (arrayDuplicado.length && type) {\n    return arrayDuplicado.filter(e => e.tipos.includes(type));\n  } else if (!type) {\n    dispatch(updateType(\"\"));\n    arrayDuplicado = [...arrayOriginal];\n    return arrayOriginal;\n  }\n  if (arrayDuplicado.length && type && order) {\n    const result = arrayDuplicado.filter(e => e.tipos === tipos);\n    const getter = pokemon => pokemon.name;\n    if (order === \"A-Z\") return sortPorNombre(result, getter);\n    if (order === \"Z-A\") return sortPorNombre(result, getter).reverse();\n  } else if (!order) {\n    dispatch(updateOrder(\"\"));\n    arrayDuplicado = [...arrayOriginal];\n    return arrayOriginal;\n  }\n  return arrayOriginal;\n};\n\n/* export const tipos = (type, array) => {\n  if (array.length && type) return array.filter((p) => p.tipos.includes(type));\n  else return [];\n};\n\nexport const sortOrder = (order, array) => {\n  let nombres = array.map((e) => e.name);\n  let fuerza = array.map((e) => e.fuerza);\n\n  const sortPorNombre = (array, getter, order = \"asc\") => {\n    array.sort((a, b) => {\n      const first = getter(a);\n      const second = getter(b);\n      const compare = first.localeCompare(second);\n      return order === \"asc\" ? compare : -compare;\n    });\n    return array;\n  };\n\n  switch (order) {\n    case \"a-z\":\n      return sortPorNombre(nombres, (nombres) => nombres.name);\n    case \"z-a\":\n      return sortPorNombre(nombres, (nombres) => nombres.name).reverse();\n    case \"fuerza+\":\n      return fuerza.sort((a, b) => b - a);\n    case \"fuerza-\":\n      return fuerza.sort((a, b) => a - b);\n    default:\n      return array;\n  }\n};\n/* \nexport const tipos = (type, array) => {\n  if (array.length) return array.filter((p) => p.type.includes(type));\n  return [];\n};\n\nexport const ordered = (order, array) => {\n  let names = array.map((o) => o.name);\n  let fuerza = array.map((o) => o.fuerza);\n  let orde = [];\n\n  switch (order) {\n    case \"a-z\":\n      names = names.sort();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"z-a\":\n      names = names.sort().reverse();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"fuerza+\":\n      fuerza = fuerza.sort((a, b) => b - a);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    case \"fuerza-\":\n      fuerza = fuerza.sort((a, b) => a - b);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    default:\n      return array;\n  }\n};\n */","map":{"version":3,"names":["filter","array","type","arrayOriginal","arrayFiltros","e","tipos","includes","dispatch","updateType","sortPorNombre","getter","order","arguments","length","undefined","sort","a","b","first","second","compare","localeCompare","utils","arrayDuplicado","result","pokemon","name","reverse","updateOrder"],"sources":["/home/cristian/Escritorio/PI-Pokemon-main/client/src/assets/utils/utils.js"],"sourcesContent":["export const filter = (array, type)=>{\n  const arrayOriginal = array;\n  const arrayFiltros = arrayOriginal.filter((e)=> e.tipos.includes(type));\n  if(type) return arrayFiltros;\n  else dispatch(updateType(\"\"));\n  return arrayOriginal;\n}\n\nconst sortPorNombre = (array, getter, order = \"asc\") => {\n  array.sort((a, b) => {\n    const first = getter(a);\n    const second = getter(b);\n    const compare = first.localeCompare(second);\n    return order === \"asc\" ? compare : -compare;\n  });\n  return array;\n};\n\nexport const utils = (array, type, order) => {\n  const arrayOriginal = array;\n  const arrayDuplicado = [...array];\n\n  if (arrayDuplicado.length && type) {\n    return arrayDuplicado.filter((e) => e.tipos.includes(type));\n  } else if (!type) {\n    dispatch(updateType(\"\"));\n    arrayDuplicado = [...arrayOriginal];\n    return arrayOriginal;\n  }\n  if (arrayDuplicado.length && type && order) {\n    const result = arrayDuplicado.filter((e) => e.tipos === tipos);\n    const getter = (pokemon) => pokemon.name;\n    if (order === \"A-Z\") return sortPorNombre(result, getter);\n    if (order === \"Z-A\") return sortPorNombre(result, getter).reverse();\n  } else if(!order){\n    dispatch(updateOrder(\"\"))\n    arrayDuplicado = [...arrayOriginal];\n    return arrayOriginal;\n  }\n  return arrayOriginal;\n};\n\n/* export const tipos = (type, array) => {\n  if (array.length && type) return array.filter((p) => p.tipos.includes(type));\n  else return [];\n};\n\nexport const sortOrder = (order, array) => {\n  let nombres = array.map((e) => e.name);\n  let fuerza = array.map((e) => e.fuerza);\n\n  const sortPorNombre = (array, getter, order = \"asc\") => {\n    array.sort((a, b) => {\n      const first = getter(a);\n      const second = getter(b);\n      const compare = first.localeCompare(second);\n      return order === \"asc\" ? compare : -compare;\n    });\n    return array;\n  };\n\n  switch (order) {\n    case \"a-z\":\n      return sortPorNombre(nombres, (nombres) => nombres.name);\n    case \"z-a\":\n      return sortPorNombre(nombres, (nombres) => nombres.name).reverse();\n    case \"fuerza+\":\n      return fuerza.sort((a, b) => b - a);\n    case \"fuerza-\":\n      return fuerza.sort((a, b) => a - b);\n    default:\n      return array;\n  }\n};\n/* \nexport const tipos = (type, array) => {\n  if (array.length) return array.filter((p) => p.type.includes(type));\n  return [];\n};\n\nexport const ordered = (order, array) => {\n  let names = array.map((o) => o.name);\n  let fuerza = array.map((o) => o.fuerza);\n  let orde = [];\n\n  switch (order) {\n    case \"a-z\":\n      names = names.sort();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"z-a\":\n      names = names.sort().reverse();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"fuerza+\":\n      fuerza = fuerza.sort((a, b) => b - a);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    case \"fuerza-\":\n      fuerza = fuerza.sort((a, b) => a - b);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    default:\n      return array;\n  }\n};\n */\n"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAG;EACnC,MAAMC,aAAa,GAAGF,KAAK;EAC3B,MAAMG,YAAY,GAAGD,aAAa,CAACH,MAAM,CAAEK,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACC,QAAQ,CAACL,IAAI,CAAC,CAAC;EACvE,IAAGA,IAAI,EAAE,OAAOE,YAAY,CAAC,KACxBI,QAAQ,CAACC,UAAU,CAAC,EAAE,CAAC,CAAC;EAC7B,OAAON,aAAa;AACtB,CAAC;AAED,MAAMO,aAAa,GAAG,SAAAA,CAACT,KAAK,EAAEU,MAAM,EAAoB;EAAA,IAAlBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACjDZ,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACnB,MAAMC,KAAK,GAAGR,MAAM,CAACM,CAAC,CAAC;IACvB,MAAMG,MAAM,GAAGT,MAAM,CAACO,CAAC,CAAC;IACxB,MAAMG,OAAO,GAAGF,KAAK,CAACG,aAAa,CAACF,MAAM,CAAC;IAC3C,OAAOR,KAAK,KAAK,KAAK,GAAGS,OAAO,GAAG,CAACA,OAAO;EAC7C,CAAC,CAAC;EACF,OAAOpB,KAAK;AACd,CAAC;AAED,OAAO,MAAMsB,KAAK,GAAGA,CAACtB,KAAK,EAAEC,IAAI,EAAEU,KAAK,KAAK;EAC3C,MAAMT,aAAa,GAAGF,KAAK;EAC3B,MAAMuB,cAAc,GAAG,CAAC,GAAGvB,KAAK,CAAC;EAEjC,IAAIuB,cAAc,CAACV,MAAM,IAAIZ,IAAI,EAAE;IACjC,OAAOsB,cAAc,CAACxB,MAAM,CAAEK,CAAC,IAAKA,CAAC,CAACC,KAAK,CAACC,QAAQ,CAACL,IAAI,CAAC,CAAC;EAC7D,CAAC,MAAM,IAAI,CAACA,IAAI,EAAE;IAChBM,QAAQ,CAACC,UAAU,CAAC,EAAE,CAAC,CAAC;IACxBe,cAAc,GAAG,CAAC,GAAGrB,aAAa,CAAC;IACnC,OAAOA,aAAa;EACtB;EACA,IAAIqB,cAAc,CAACV,MAAM,IAAIZ,IAAI,IAAIU,KAAK,EAAE;IAC1C,MAAMa,MAAM,GAAGD,cAAc,CAACxB,MAAM,CAAEK,CAAC,IAAKA,CAAC,CAACC,KAAK,KAAKA,KAAK,CAAC;IAC9D,MAAMK,MAAM,GAAIe,OAAO,IAAKA,OAAO,CAACC,IAAI;IACxC,IAAIf,KAAK,KAAK,KAAK,EAAE,OAAOF,aAAa,CAACe,MAAM,EAAEd,MAAM,CAAC;IACzD,IAAIC,KAAK,KAAK,KAAK,EAAE,OAAOF,aAAa,CAACe,MAAM,EAAEd,MAAM,CAAC,CAACiB,OAAO,CAAC,CAAC;EACrE,CAAC,MAAM,IAAG,CAAChB,KAAK,EAAC;IACfJ,QAAQ,CAACqB,WAAW,CAAC,EAAE,CAAC,CAAC;IACzBL,cAAc,GAAG,CAAC,GAAGrB,aAAa,CAAC;IACnC,OAAOA,aAAa;EACtB;EACA,OAAOA,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}