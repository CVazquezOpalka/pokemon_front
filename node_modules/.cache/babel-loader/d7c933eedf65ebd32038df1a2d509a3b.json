{"ast":null,"code":"export const tipos = (type, array) => {\n  array.length ? array.filter(e => e.tipos.includes(type)) : [];\n};\nexport const sortOrder = (order, array) => {\n  let nombres = array.map(e => e.name);\n  let fuerza = array.map(e => e.fuerza);\n  const sortPorNombre = function (array, getter) {\n    let order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"asc\";\n    array.sort((a, b) => {\n      const first = getter(a);\n      const second = getter(b);\n      const compare = first.localeCompare(second);\n      return order === \"asc\" ? compare : -compare;\n    });\n    return array;\n  };\n  switch (order) {\n    case \"a-z\":\n      return sortPorNombre(nombres, nombres => nombres.name);\n    case \"z-a\":\n      return sortPorNombre(nombres, nombres => nombres.name).reverse();\n    case \"fuerza+\":\n      return fuerza.sort((a, b) => b - a);\n    case \"fuerza-\":\n      return fuerza.sort((a, b) => a - b);\n    default:\n      return array;\n  }\n};\n/* \nexport const tipos = (type, array) => {\n  if (array.length) return array.filter((p) => p.type.includes(type));\n  return [];\n};\n\nexport const ordered = (order, array) => {\n  let names = array.map((o) => o.name);\n  let fuerza = array.map((o) => o.fuerza);\n  let orde = [];\n\n  switch (order) {\n    case \"a-z\":\n      names = names.sort();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"z-a\":\n      names = names.sort().reverse();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"fuerza+\":\n      fuerza = fuerza.sort((a, b) => b - a);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    case \"fuerza-\":\n      fuerza = fuerza.sort((a, b) => a - b);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    default:\n      return array;\n  }\n};\n */","map":{"version":3,"names":["tipos","type","array","length","filter","e","includes","sortOrder","order","nombres","map","name","fuerza","sortPorNombre","getter","arguments","undefined","sort","a","b","first","second","compare","localeCompare","reverse"],"sources":["/home/cristian/Escritorio/PI-Pokemon-main/client/src/assets/utils/utils.js"],"sourcesContent":["export const tipos = (type, array) => {\n  array.length ? array.filter((e) => e.tipos.includes(type)) : [];\n};\n\nexport const sortOrder = (order, array) => {\n  let nombres = array.map((e) => e.name);\n  let fuerza = array.map((e) => e.fuerza);\n\n  const sortPorNombre = (array, getter, order = \"asc\") => {\n    array.sort((a, b) => {\n      const first = getter(a);\n      const second = getter(b);\n      const compare = first.localeCompare(second);\n      return order === \"asc\" ? compare : -compare;\n    });\n    return array;\n  };\n\n  switch (order) {\n    case \"a-z\":\n      return sortPorNombre(nombres, (nombres) => nombres.name);\n    case \"z-a\":\n      return sortPorNombre(nombres, (nombres) => nombres.name).reverse();\n    case \"fuerza+\":\n      return fuerza.sort((a, b) => b - a);\n    case \"fuerza-\":\n      return fuerza.sort((a, b) => a - b);\n    default:\n      return array;\n  }\n};\n/* \nexport const tipos = (type, array) => {\n  if (array.length) return array.filter((p) => p.type.includes(type));\n  return [];\n};\n\nexport const ordered = (order, array) => {\n  let names = array.map((o) => o.name);\n  let fuerza = array.map((o) => o.fuerza);\n  let orde = [];\n\n  switch (order) {\n    case \"a-z\":\n      names = names.sort();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"z-a\":\n      names = names.sort().reverse();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"fuerza+\":\n      fuerza = fuerza.sort((a, b) => b - a);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    case \"fuerza-\":\n      fuerza = fuerza.sort((a, b) => a - b);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    default:\n      return array;\n  }\n};\n */\n"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EACpCA,KAAK,CAACC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACL,KAAK,CAACM,QAAQ,CAACL,IAAI,CAAC,CAAC,GAAG,EAAE;AACjE,CAAC;AAED,OAAO,MAAMM,SAAS,GAAGA,CAACC,KAAK,EAAEN,KAAK,KAAK;EACzC,IAAIO,OAAO,GAAGP,KAAK,CAACQ,GAAG,CAAEL,CAAC,IAAKA,CAAC,CAACM,IAAI,CAAC;EACtC,IAAIC,MAAM,GAAGV,KAAK,CAACQ,GAAG,CAAEL,CAAC,IAAKA,CAAC,CAACO,MAAM,CAAC;EAEvC,MAAMC,aAAa,GAAG,SAAAA,CAACX,KAAK,EAAEY,MAAM,EAAoB;IAAA,IAAlBN,KAAK,GAAAO,SAAA,CAAAZ,MAAA,QAAAY,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;IACjDb,KAAK,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACnB,MAAMC,KAAK,GAAGN,MAAM,CAACI,CAAC,CAAC;MACvB,MAAMG,MAAM,GAAGP,MAAM,CAACK,CAAC,CAAC;MACxB,MAAMG,OAAO,GAAGF,KAAK,CAACG,aAAa,CAACF,MAAM,CAAC;MAC3C,OAAOb,KAAK,KAAK,KAAK,GAAGc,OAAO,GAAG,CAACA,OAAO;IAC7C,CAAC,CAAC;IACF,OAAOpB,KAAK;EACd,CAAC;EAED,QAAQM,KAAK;IACX,KAAK,KAAK;MACR,OAAOK,aAAa,CAACJ,OAAO,EAAGA,OAAO,IAAKA,OAAO,CAACE,IAAI,CAAC;IAC1D,KAAK,KAAK;MACR,OAAOE,aAAa,CAACJ,OAAO,EAAGA,OAAO,IAAKA,OAAO,CAACE,IAAI,CAAC,CAACa,OAAO,CAAC,CAAC;IACpE,KAAK,SAAS;MACZ,OAAOZ,MAAM,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAGD,CAAC,CAAC;IACrC,KAAK,SAAS;MACZ,OAAON,MAAM,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IACrC;MACE,OAAOjB,KAAK;EAChB;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}