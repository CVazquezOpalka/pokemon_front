{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON, CREATE_POKEMON, GET_TYPES, FILTER_TYPES, SORT_ORDER, UPDATE_POKEMONS, UPDATE_POKEMON, UPDATE_ORDER, UPDATE_TYPE, UPDATE_SEARCH, SEARCH_POKEMON_REQUEST, SEARCH_POKEMON_SUCCESS, SEARCH_POKEMON_FAILURE } from \"./actionTypes\";\n\n//FUNCIONES DE LIMPIEZA\n\nexport const updateSearch = payload => {\n  return {\n    type: UPDATE_SEARCH,\n    payload\n  };\n};\nexport const updatePokemons = payload => {\n  return {\n    type: UPDATE_POKEMONS,\n    payload\n  };\n};\nexport const updatePokemon = payload => {\n  return {\n    type: UPDATE_POKEMON,\n    payload\n  };\n};\nexport const updateType = payload => {\n  return {\n    type: UPDATE_TYPE,\n    payload\n  };\n};\nexport const updateOrder = payload => {\n  return {\n    type: UPDATE_ORDER,\n    payload\n  };\n};\n\n//CONTROLADOR DE ERRORES DEL SEARCH BAR;\n\nexport const searchPokemonRequest = () => ({\n  type: SEARCH_POKEMON_REQUEST\n});\nexport const searchPokemonSuccess = pokemon => ({\n  type: SEARCH_POKEMON_SUCCESS,\n  payload: pokemon\n});\nexport const searchPokemonFailure = error => ({\n  type: SEARCH_POKEMON_FAILURE,\n  payload: error\n});\n\n//LLAMADOS A LA API\n\nexport function getTypes() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/types\").then(res => res.json()).then(json => dispatch({\n      type: GET_TYPES,\n      payload: json\n    }));\n  };\n}\nexport function getPokemons() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/pokemons\").then(res => res.json()).then(json => dispatch({\n      type: GET_POKEMONS,\n      payload: json\n    }));\n  };\n}\nexport function getPokemon(id) {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(res => res.json()).then(json => dispatch({\n      type: GET_POKEMON,\n      payload: json\n    }));\n  };\n}\nexport function getPokemonByName(name) {\n  return function (dispatch) {\n    dispatch(searchPokemonRequest());\n    return fetch(`http://localhost:3001/pokemons?name=${name}`).then(response => {\n      if (!response.ok) {\n        return response.text().then(errorMessage => {\n          throw new Error(errorMessage);\n        });\n      }\n      return response.json();\n    }).then(response => response.json()).then(json => dispatch(searchPokemonSuccess(json))).catch(error => {\n      if (error.response && error.response.status === 404) {\n        dispatch(searchPokemonFailure(error.message));\n      } else {\n        dispatch(searchPokemonFailure(\"Se produjo un error al buscar el pokemon\"));\n      }\n    });\n  };\n}\nexport function filterTypes(type) {\n  return function (dispatch) {\n    dispatch({\n      type: FILTER_TYPES,\n      payload: type\n    });\n  };\n}\nexport function sortOrder(order) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_ORDER,\n      payload: order\n    });\n  };\n}","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON","CREATE_POKEMON","GET_TYPES","FILTER_TYPES","SORT_ORDER","UPDATE_POKEMONS","UPDATE_POKEMON","UPDATE_ORDER","UPDATE_TYPE","UPDATE_SEARCH","SEARCH_POKEMON_REQUEST","SEARCH_POKEMON_SUCCESS","SEARCH_POKEMON_FAILURE","updateSearch","payload","type","updatePokemons","updatePokemon","updateType","updateOrder","searchPokemonRequest","searchPokemonSuccess","pokemon","searchPokemonFailure","error","getTypes","dispatch","fetch","then","res","json","getPokemons","getPokemon","id","getPokemonByName","name","response","ok","text","errorMessage","Error","catch","status","message","filterTypes","sortOrder","order"],"sources":["/home/cristian/Escritorio/PI-Pokemon-main/client/src/redux/actions.js"],"sourcesContent":["import {\n  GET_POKEMONS,\n  GET_POKEMON,\n  CREATE_POKEMON,\n  GET_TYPES,\n  FILTER_TYPES,\n  SORT_ORDER,\n  UPDATE_POKEMONS,\n  UPDATE_POKEMON,\n  UPDATE_ORDER,\n  UPDATE_TYPE,\n  UPDATE_SEARCH,\n  SEARCH_POKEMON_REQUEST,\n  SEARCH_POKEMON_SUCCESS,\n  SEARCH_POKEMON_FAILURE,\n} from \"./actionTypes\";\n\n//FUNCIONES DE LIMPIEZA\n\nexport const updateSearch = (payload) => {\n  return {\n    type: UPDATE_SEARCH,\n    payload,\n  };\n};\n\nexport const updatePokemons = (payload) => {\n  return {\n    type: UPDATE_POKEMONS,\n    payload,\n  };\n};\nexport const updatePokemon = (payload) => {\n  return {\n    type: UPDATE_POKEMON,\n    payload,\n  };\n};\n\nexport const updateType = (payload) => {\n  return {\n    type: UPDATE_TYPE,\n    payload,\n  };\n};\n\nexport const updateOrder = (payload) => {\n  return {\n    type: UPDATE_ORDER,\n    payload,\n  };\n};\n\n//CONTROLADOR DE ERRORES DEL SEARCH BAR;\n\nexport const searchPokemonRequest = () => ({\n  type: SEARCH_POKEMON_REQUEST,\n});\n\nexport const searchPokemonSuccess = (pokemon) => ({\n  type: SEARCH_POKEMON_SUCCESS,\n  payload: pokemon,\n});\n\nexport const searchPokemonFailure = (error) => ({\n  type: SEARCH_POKEMON_FAILURE,\n  payload: error,\n});\n\n//LLAMADOS A LA API\n\nexport function getTypes() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/types\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_TYPES,\n          payload: json,\n        })\n      );\n  };\n}\n\nexport function getPokemons() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/pokemons\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_POKEMONS,\n          payload: json,\n        })\n      );\n  };\n}\n\nexport function getPokemon(id) {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_POKEMON,\n          payload: json,\n        })\n      );\n  };\n}\nexport function getPokemonByName(name) {\n  return function (dispatch) {\n    dispatch(searchPokemonRequest());\n    return fetch(`http://localhost:3001/pokemons?name=${name}`)\n      .then((response) => {\n        if (!response.ok) {\n          return response.text().then((errorMessage) => {\n            throw new Error(errorMessage);\n          });\n        }\n        return response.json();\n      })\n      .then((response) => response.json())\n      .then((json) => dispatch(searchPokemonSuccess(json)))\n      .catch((error) => {\n        if (error.response && error.response.status === 404) {\n          dispatch(searchPokemonFailure(error.message));\n        } else {\n          dispatch(\n            searchPokemonFailure(\"Se produjo un error al buscar el pokemon\")\n          );\n        }\n      });\n  };\n}\n\nexport function filterTypes(type) {\n  return function (dispatch) {\n    dispatch({\n      type: FILTER_TYPES,\n      payload: type,\n    });\n  };\n}\n\nexport function sortOrder(order) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_ORDER,\n      payload: order,\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}