{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMONS_REQUEST, GET_POKEMONS_ACEPTADO, GET_POKEMONS_FALLO, GET_POKEMON, GET_TYPES, FILTER_TYPES, SORT_ORDER, UPDATE_POKEMONS, UPDATE_POKEMON, UPDATE_ORDER, UPDATE_TYPE, UPDATE_SEARCH, SEARCH_POKEMON_REQUEST, SEARCH_POKEMON_SUCCESS, SEARCH_POKEMON_FAILURE, CREATE_POKEMON_REQUEST, CREATE_POKEMON_ACEPTADO, CREATE_POKEMON_FALLO } from \"./actionTypes\";\n\n//FUNCIONES DE LIMPIEZA\n\nexport const updateSearch = payload => {\n  return {\n    type: UPDATE_SEARCH,\n    payload\n  };\n};\nexport const updatePokemons = payload => {\n  return {\n    type: UPDATE_POKEMONS,\n    payload\n  };\n};\nexport const updatePokemon = payload => {\n  return {\n    type: UPDATE_POKEMON,\n    payload\n  };\n};\nexport const updateType = payload => {\n  return {\n    type: UPDATE_TYPE,\n    payload\n  };\n};\nexport const updateOrder = payload => {\n  return {\n    type: UPDATE_ORDER,\n    payload\n  };\n};\n//CONTROLADOR DE ERRORES DEL SEARCH BAR;\n\nexport const searchPokemonRequest = () => ({\n  type: SEARCH_POKEMON_REQUEST\n});\nexport const searchPokemonSuccess = pokemon => ({\n  type: SEARCH_POKEMON_SUCCESS,\n  payload: pokemon\n});\nexport const searchPokemonFailure = error => ({\n  type: SEARCH_POKEMON_FAILURE,\n  payload: error\n});\n\n// CONROLADOR DEL FORMULARIO DE CREACION\n\nexport const createPokemonRequest = () => ({\n  type: CREATE_POKEMON_REQUEST\n});\nexport const createPokemonAceptado = () => ({\n  type: CREATE_POKEMON_ACEPTADO\n});\nexport const createPokemonFallo = () => ({\n  type: CREATE_POKEMON_FALLO\n});\n\n//funcion de creacion\n\nexport const createPokemon = pokemonData => {\n  return async dispatch => {\n    dispatch(createPokemonRequest()); // Iniciar la solicitud\n    try {\n      const response = await fetch(\"http://localhost:3001/pokemons\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(pokemonData)\n      });\n      if (response.status === 400) {\n        alert(`Ya existe el Pokémon con el nombre ${pokemonData.name.toLowerCase()}`);\n        throw new Error(`Ya existe el Pokémon con el nombre \"${pokemonData.name.toLowerCase()}\"`);\n      } else {\n        alert(\"Pokémon creado con éxito\");\n        dispatch(createPokemonAceptado()); // Solicitud exitosa\n      }\n    } catch (error) {\n      dispatch(createPokemonFallo(error)); // Error en la solicitud\n    }\n  };\n};\n\n//LLAMADOS A LA API\n\nexport function getTypes() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/types\").then(res => res.json()).then(json => dispatch({\n      type: GET_TYPES,\n      payload: json\n    }));\n  };\n}\n//CONTROLADORES DE LA PETICION DE LA API PARA TODOS LOS POKEMOS\nexport const getPokemonsRequest = () => ({\n  type: GET_POKEMONS_REQUEST\n});\nexport const getPokemonsAceptados = pokeData => ({\n  type: GET_POKEMONS_ACEPTADO,\n  payload: pokeData\n});\nexport const getPokemonsFallo = () => ({\n  type: GET_POKEMONS_FALLO\n});\nexport function getPokemons() {\n  return function (dispatch) {\n    dispatch(getPokemonsRequest());\n    return fetch(\"http://localhost:3001/pokemons\").then(res => res.json()).then(json => dispatch(getPoke));\n  };\n}\nexport function getPokemon(id) {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(res => res.json()).then(json => dispatch({\n      type: GET_POKEMON,\n      payload: json\n    }));\n  };\n}\nexport function getPokemonByName(name) {\n  return function (dispatch) {\n    //esta funcion recibe un nombre como argumento y despacha 3 acciones,\n    //pone el estado loading en true, error en null\n    dispatch(searchPokemonRequest());\n    return fetch(`http://localhost:3001/pokemons?name=${name}`)\n    //control del error\n    .then(async response => {\n      //primera accion a despachar el manejo de errores, si la respuesta es distinta de ok, obtenemos el error y lo arrojamos al catch\n      if (!response.ok) {\n        let error;\n        try {\n          error = await response.json(); //\n        } catch (err) {\n          //mensaje alternativo\n          error = {\n            message: \"Error desconocido\"\n          }; // Si no se puede extraer, asigno un error genérico\n        }\n\n        throw error;\n      }\n      return response.json();\n    }).then(pokemon => {\n      dispatch(searchPokemonSuccess(pokemon));\n    }).catch(error => {\n      dispatch(searchPokemonFailure(error));\n    });\n  };\n}\nexport function filterTypes(type) {\n  return function (dispatch) {\n    dispatch({\n      type: FILTER_TYPES,\n      payload: type\n    });\n  };\n}\nexport function sortOrder(order) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_ORDER,\n      payload: order\n    });\n  };\n}","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMONS_REQUEST","GET_POKEMONS_ACEPTADO","GET_POKEMONS_FALLO","GET_POKEMON","GET_TYPES","FILTER_TYPES","SORT_ORDER","UPDATE_POKEMONS","UPDATE_POKEMON","UPDATE_ORDER","UPDATE_TYPE","UPDATE_SEARCH","SEARCH_POKEMON_REQUEST","SEARCH_POKEMON_SUCCESS","SEARCH_POKEMON_FAILURE","CREATE_POKEMON_REQUEST","CREATE_POKEMON_ACEPTADO","CREATE_POKEMON_FALLO","updateSearch","payload","type","updatePokemons","updatePokemon","updateType","updateOrder","searchPokemonRequest","searchPokemonSuccess","pokemon","searchPokemonFailure","error","createPokemonRequest","createPokemonAceptado","createPokemonFallo","createPokemon","pokemonData","dispatch","response","fetch","method","headers","Accept","body","JSON","stringify","status","alert","name","toLowerCase","Error","getTypes","then","res","json","getPokemonsRequest","getPokemonsAceptados","pokeData","getPokemonsFallo","getPokemons","getPoke","getPokemon","id","getPokemonByName","ok","err","message","catch","filterTypes","sortOrder","order"],"sources":["/home/cristian/Escritorio/PI-Pokemon-main/client/src/redux/actions.js"],"sourcesContent":["import {\n  GET_POKEMONS,\n  GET_POKEMONS_REQUEST,\n  GET_POKEMONS_ACEPTADO,\n  GET_POKEMONS_FALLO,\n  GET_POKEMON,\n  GET_TYPES,\n  FILTER_TYPES,\n  SORT_ORDER,\n  UPDATE_POKEMONS,\n  UPDATE_POKEMON,\n  UPDATE_ORDER,\n  UPDATE_TYPE,\n  UPDATE_SEARCH,\n  SEARCH_POKEMON_REQUEST,\n  SEARCH_POKEMON_SUCCESS,\n  SEARCH_POKEMON_FAILURE,\n  CREATE_POKEMON_REQUEST,\n  CREATE_POKEMON_ACEPTADO,\n  CREATE_POKEMON_FALLO,\n} from \"./actionTypes\";\n\n//FUNCIONES DE LIMPIEZA\n\nexport const updateSearch = (payload) => {\n  return {\n    type: UPDATE_SEARCH,\n    payload,\n  };\n};\nexport const updatePokemons = (payload) => {\n  return {\n    type: UPDATE_POKEMONS,\n    payload,\n  };\n};\nexport const updatePokemon = (payload) => {\n  return {\n    type: UPDATE_POKEMON,\n    payload,\n  };\n};\nexport const updateType = (payload) => {\n  return {\n    type: UPDATE_TYPE,\n    payload,\n  };\n};\nexport const updateOrder = (payload) => {\n  return {\n    type: UPDATE_ORDER,\n    payload,\n  };\n};\n//CONTROLADOR DE ERRORES DEL SEARCH BAR;\n\nexport const searchPokemonRequest = () => ({\n  type: SEARCH_POKEMON_REQUEST,\n});\n\nexport const searchPokemonSuccess = (pokemon) => ({\n  type: SEARCH_POKEMON_SUCCESS,\n  payload: pokemon,\n});\n\nexport const searchPokemonFailure = (error) => ({\n  type: SEARCH_POKEMON_FAILURE,\n  payload: error,\n});\n\n// CONROLADOR DEL FORMULARIO DE CREACION\n\nexport const createPokemonRequest = () => ({\n  type: CREATE_POKEMON_REQUEST,\n});\n\nexport const createPokemonAceptado = () => ({\n  type: CREATE_POKEMON_ACEPTADO,\n});\n\nexport const createPokemonFallo = () => ({\n  type: CREATE_POKEMON_FALLO,\n});\n\n//funcion de creacion\n\nexport const createPokemon = (pokemonData) => {\n  return async (dispatch) => {\n    dispatch(createPokemonRequest()); // Iniciar la solicitud\n    try {\n      const response = await fetch(\"http://localhost:3001/pokemons\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(pokemonData),\n      });\n\n      if (response.status === 400) {\n        alert(\n          `Ya existe el Pokémon con el nombre ${pokemonData.name.toLowerCase()}`\n        );\n        throw new Error(\n          `Ya existe el Pokémon con el nombre \"${pokemonData.name.toLowerCase()}\"`\n        );\n      } else {\n        alert(\"Pokémon creado con éxito\");\n        dispatch(createPokemonAceptado()); // Solicitud exitosa\n      }\n    } catch (error) {\n      dispatch(createPokemonFallo(error)); // Error en la solicitud\n    }\n  };\n};\n\n//LLAMADOS A LA API\n\nexport function getTypes() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/types\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_TYPES,\n          payload: json,\n        })\n      );\n  };\n}\n//CONTROLADORES DE LA PETICION DE LA API PARA TODOS LOS POKEMOS\nexport const getPokemonsRequest = () => ({\n  type: GET_POKEMONS_REQUEST,\n});\nexport const getPokemonsAceptados = (pokeData) => ({\n  type: GET_POKEMONS_ACEPTADO,\n  payload: pokeData,\n});\nexport const getPokemonsFallo = () => ({\n  type: GET_POKEMONS_FALLO,\n});\nexport function getPokemons() {\n  return function (dispatch) {\n    dispatch(getPokemonsRequest())\n    return fetch(\"http://localhost:3001/pokemons\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch(getPoke)\n      );\n  };\n}\n\nexport function getPokemon(id) {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_POKEMON,\n          payload: json,\n        })\n      );\n  };\n}\nexport function getPokemonByName(name) {\n  return function (dispatch) {\n    //esta funcion recibe un nombre como argumento y despacha 3 acciones,\n    //pone el estado loading en true, error en null\n    dispatch(searchPokemonRequest());\n    return (\n      fetch(`http://localhost:3001/pokemons?name=${name}`)\n        //control del error\n        .then(async (response) => {\n          //primera accion a despachar el manejo de errores, si la respuesta es distinta de ok, obtenemos el error y lo arrojamos al catch\n          if (!response.ok) {\n            let error;\n            try {\n              error = await response.json(); //\n            } catch (err) {\n              //mensaje alternativo\n              error = { message: \"Error desconocido\" }; // Si no se puede extraer, asigno un error genérico\n            }\n            throw error;\n          }\n          return response.json();\n        })\n        .then((pokemon) => {\n          dispatch(searchPokemonSuccess(pokemon));\n        })\n        .catch((error) => {\n          dispatch(searchPokemonFailure(error));\n        })\n    );\n  };\n}\n\nexport function filterTypes(type) {\n  return function (dispatch) {\n    dispatch({\n      type: FILTER_TYPES,\n      payload: type,\n    });\n  };\n}\n\nexport function sortOrder(order) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_ORDER,\n      payload: order,\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}