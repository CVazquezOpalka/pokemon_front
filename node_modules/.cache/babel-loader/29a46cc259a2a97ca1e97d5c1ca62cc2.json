{"ast":null,"code":"import { GET_POKEMONS, GET_POKEMON, GET_TYPES, FILTER_TYPES, SORT_ORDER, UPDATE_POKEMON, UPDATE_ORDER, UPDATE_TYPE, UPDATE_ERROR, SEARCH_POKEMON_REQUEST, SEARCH_POKEMON_SUCCESS, SEARCH_POKEMON_FAILURE, CREATE_POKEMON_REQUEST, CREATE_POKEMON_ACEPTADO, CREATE_POKEMON_FALLO, UPDATE_LOADING } from \"./actionTypes\";\n\n//FUNCIONES DE LIMPIEZA\nexport const updateLoading = payload => ({\n  type: UPDATE_LOADING,\n  payload\n});\nexport const updateError = payload => ({\n  type: UPDATE_ERROR,\n  payload\n});\nexport const updatePokemon = payload => {\n  return {\n    type: UPDATE_POKEMON,\n    payload\n  };\n};\nexport const updateType = payload => {\n  return {\n    type: UPDATE_TYPE,\n    payload\n  };\n};\nexport const updateOrder = payload => {\n  return {\n    type: UPDATE_ORDER,\n    payload\n  };\n};\n//CONTROLADOR DE ERRORES DEL SEARCH BAR;\n\nexport const searchPokemonRequest = () => ({\n  type: SEARCH_POKEMON_REQUEST\n});\nexport const searchPokemonSuccess = pokemon => ({\n  type: SEARCH_POKEMON_SUCCESS,\n  payload: pokemon\n});\nexport const searchPokemonFailure = error => ({\n  type: SEARCH_POKEMON_FAILURE,\n  payload: error\n});\n\n// CONROLADOR DEL FORMULARIO DE CREACION\n\nexport const createPokemonRequest = () => ({\n  type: CREATE_POKEMON_REQUEST\n});\nexport const createPokemonAceptado = () => ({\n  type: CREATE_POKEMON_ACEPTADO\n});\nexport const createPokemonFallo = () => ({\n  type: CREATE_POKEMON_FALLO\n});\n\n//funcion de creacion\n\nexport const createPokemon = pokemonData => {\n  return async dispatch => {\n    dispatch(createPokemonRequest()); // Iniciar la solicitud\n    try {\n      const response = await fetch(\"http://localhost:3001/pokemons\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(pokemonData)\n      });\n      if (response.status === 400) {\n        alert(`Ya existe el Pokémon con el nombre ${pokemonData.name.toLowerCase()}`);\n        throw new Error(`Ya existe el Pokémon con el nombre \"${pokemonData.name.toLowerCase()}\"`);\n      } else {\n        alert(\"Pokémon creado con éxito\");\n        dispatch(createPokemonAceptado());\n        dispatch(getPokemons()); // Solicitud exitosa\n      }\n    } catch (error) {\n      dispatch(createPokemonFallo(error)); // Error en la solicitud\n    }\n  };\n};\n\n//LLAMADOS A LA API\n\nexport function getTypes() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/types\").then(res => res.json()).then(json => dispatch({\n      type: GET_TYPES,\n      payload: json\n    }));\n  };\n}\n\n/* export function getPokemons() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/pokemons\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_POKEMONS,\n          payload: json,\n        })\n      );\n  };\n} */\nexport const getPokemons = () => async dispatch => {\n  const URL = \"http://localhost:3001/pokemons\";\n  try {\n    const response = await fetch(URL);\n    if (!response.ok) throw Error(\"error\");\n    const data = await response.json();\n    dispatch({\n      type: GET_POKEMONS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport function getPokemon(id) {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/pokemons/${id}`).then(res => {\n      if (!res.ok) {\n        const errorHandle = `No existe el pokemon con el Id: ${id} `;\n        throw errorHandle;\n      }\n    }).then(json => dispatch({\n      type: GET_POKEMON,\n      payload: json\n    })).catch(error => {\n      dispatch(updateError(Error));\n    });\n  };\n}\n\n/* export function getPokemonByName(name) {\n  return function (dispatch) {\n    //esta funcion recibe un nombre como argumento y despacha 3 acciones,\n    //pone el estado loading en true, error en null\n    dispatch(searchPokemonRequest());\n    return (\n      fetch(`http://localhost:3001/pokemons?name=${name}`)\n        //control del error\n        .then(async (response) => {\n          //primera accion a despachar el manejo de errores, si la respuesta es distinta de ok, obtenemos el error y lo arrojamos al catch\n          if (!response.ok) {\n            let error;\n            try {\n              error = await response.json(); //\n            } catch (err) {\n              //mensaje alternativo\n              error = { message: \"Error desconocido\" }; // Si no se puede extraer, asigno un error genérico\n            }\n            throw error;\n          }\n          return response.json();\n        })\n        .then((pokemon) => {\n          dispatch(searchPokemonSuccess(pokemon));\n        })\n        .catch((error) => {\n          dispatch(searchPokemonFailure(error));\n        })\n    );\n  };\n} */\n\nexport const getPokemonByName = name => async dispatch => {\n  const URL = `http://localhost:3001/pokemons?name=${name}`;\n  try {\n    dispatch(searchPokemonRequest());\n    const response = await fetch(URL);\n    if (!response.ok) {\n      let errorResponse;\n      try {\n        errorResponse = await response.json();\n      } catch (error) {\n        errorResponse = {\n          message: \"Algo salio Mal\"\n        };\n      }\n      throw errorResponse;\n    }\n    const pokemon = await response.json();\n    dispatch(searchPokemonSuccess(pokemon));\n  } catch (error) {\n    dispatch(searchPokemonFailure(error));\n  }\n};\nexport const filterTypes = type => dispatch => {\n  dispatch({\n    type: FILTER_TYPES,\n    payload: type\n  });\n};\nexport function sortOrder(order) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_ORDER,\n      payload: order\n    });\n  };\n}","map":{"version":3,"names":["GET_POKEMONS","GET_POKEMON","GET_TYPES","FILTER_TYPES","SORT_ORDER","UPDATE_POKEMON","UPDATE_ORDER","UPDATE_TYPE","UPDATE_ERROR","SEARCH_POKEMON_REQUEST","SEARCH_POKEMON_SUCCESS","SEARCH_POKEMON_FAILURE","CREATE_POKEMON_REQUEST","CREATE_POKEMON_ACEPTADO","CREATE_POKEMON_FALLO","UPDATE_LOADING","updateLoading","payload","type","updateError","updatePokemon","updateType","updateOrder","searchPokemonRequest","searchPokemonSuccess","pokemon","searchPokemonFailure","error","createPokemonRequest","createPokemonAceptado","createPokemonFallo","createPokemon","pokemonData","dispatch","response","fetch","method","headers","Accept","body","JSON","stringify","status","alert","name","toLowerCase","Error","getPokemons","getTypes","then","res","json","URL","ok","data","console","log","getPokemon","id","errorHandle","catch","getPokemonByName","errorResponse","message","filterTypes","sortOrder","order"],"sources":["/home/cristian/Escritorio/PI-Pokemon-main/client/src/redux/actions.js"],"sourcesContent":["import {\n  GET_POKEMONS,\n  GET_POKEMON,\n  GET_TYPES,\n  FILTER_TYPES,\n  SORT_ORDER,\n  UPDATE_POKEMON,\n  UPDATE_ORDER,\n  UPDATE_TYPE,\n  UPDATE_ERROR,\n  SEARCH_POKEMON_REQUEST,\n  SEARCH_POKEMON_SUCCESS,\n  SEARCH_POKEMON_FAILURE,\n  CREATE_POKEMON_REQUEST,\n  CREATE_POKEMON_ACEPTADO,\n  CREATE_POKEMON_FALLO,\n  UPDATE_LOADING,\n} from \"./actionTypes\";\n\n//FUNCIONES DE LIMPIEZA\nexport const updateLoading = (payload) => ({\n  type: UPDATE_LOADING,\n  payload,\n});\nexport const updateError = (payload) => ({\n  type: UPDATE_ERROR,\n  payload,\n});\n\nexport const updatePokemon = (payload) => {\n  return {\n    type: UPDATE_POKEMON,\n    payload,\n  };\n};\nexport const updateType = (payload) => {\n  return {\n    type: UPDATE_TYPE,\n    payload,\n  };\n};\nexport const updateOrder = (payload) => {\n  return {\n    type: UPDATE_ORDER,\n    payload,\n  };\n};\n//CONTROLADOR DE ERRORES DEL SEARCH BAR;\n\nexport const searchPokemonRequest = () => ({\n  type: SEARCH_POKEMON_REQUEST,\n});\n\nexport const searchPokemonSuccess = (pokemon) => ({\n  type: SEARCH_POKEMON_SUCCESS,\n  payload: pokemon,\n});\n\nexport const searchPokemonFailure = (error) => ({\n  type: SEARCH_POKEMON_FAILURE,\n  payload: error,\n});\n\n// CONROLADOR DEL FORMULARIO DE CREACION\n\nexport const createPokemonRequest = () => ({\n  type: CREATE_POKEMON_REQUEST,\n});\n\nexport const createPokemonAceptado = () => ({\n  type: CREATE_POKEMON_ACEPTADO,\n});\n\nexport const createPokemonFallo = () => ({\n  type: CREATE_POKEMON_FALLO,\n});\n\n//funcion de creacion\n\nexport const createPokemon = (pokemonData) => {\n  return async (dispatch) => {\n    dispatch(createPokemonRequest()); // Iniciar la solicitud\n    try {\n      const response = await fetch(\"http://localhost:3001/pokemons\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(pokemonData),\n      });\n\n      if (response.status === 400) {\n        alert(\n          `Ya existe el Pokémon con el nombre ${pokemonData.name.toLowerCase()}`\n        );\n        throw new Error(\n          `Ya existe el Pokémon con el nombre \"${pokemonData.name.toLowerCase()}\"`\n        );\n      } else {\n        alert(\"Pokémon creado con éxito\");\n        dispatch(createPokemonAceptado());\n        dispatch(getPokemons()); // Solicitud exitosa\n      }\n    } catch (error) {\n      dispatch(createPokemonFallo(error)); // Error en la solicitud\n    }\n  };\n};\n\n//LLAMADOS A LA API\n\nexport function getTypes() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/types\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_TYPES,\n          payload: json,\n        })\n      );\n  };\n}\n\n/* export function getPokemons() {\n  return function (dispatch) {\n    return fetch(\"http://localhost:3001/pokemons\")\n      .then((res) => res.json())\n      .then((json) =>\n        dispatch({\n          type: GET_POKEMONS,\n          payload: json,\n        })\n      );\n  };\n} */\nexport const getPokemons = () => async (dispatch) => {\n  const URL = \"http://localhost:3001/pokemons\";\n  try {\n    const response = await fetch(URL);\n    if (!response.ok) throw Error(\"error\");\n    const data = await response.json();\n    dispatch({\n      type: GET_POKEMONS,\n      payload: data,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport function getPokemon(id) {\n  return function (dispatch) {\n    return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then((res) => {\n        if (!res.ok) {\n          const errorHandle = `No existe el pokemon con el Id: ${id} `;\n          throw errorHandle;\n        }\n      })\n      .then((json) =>\n        dispatch({\n          type: GET_POKEMON,\n          payload: json,\n        })\n      )\n      .catch((error) => {\n        dispatch(updateError(Error))\n      });\n  };\n}\n\n/* export function getPokemonByName(name) {\n  return function (dispatch) {\n    //esta funcion recibe un nombre como argumento y despacha 3 acciones,\n    //pone el estado loading en true, error en null\n    dispatch(searchPokemonRequest());\n    return (\n      fetch(`http://localhost:3001/pokemons?name=${name}`)\n        //control del error\n        .then(async (response) => {\n          //primera accion a despachar el manejo de errores, si la respuesta es distinta de ok, obtenemos el error y lo arrojamos al catch\n          if (!response.ok) {\n            let error;\n            try {\n              error = await response.json(); //\n            } catch (err) {\n              //mensaje alternativo\n              error = { message: \"Error desconocido\" }; // Si no se puede extraer, asigno un error genérico\n            }\n            throw error;\n          }\n          return response.json();\n        })\n        .then((pokemon) => {\n          dispatch(searchPokemonSuccess(pokemon));\n        })\n        .catch((error) => {\n          dispatch(searchPokemonFailure(error));\n        })\n    );\n  };\n} */\n\nexport const getPokemonByName = (name) => async (dispatch) => {\n  const URL = `http://localhost:3001/pokemons?name=${name}`;\n  try {\n    dispatch(searchPokemonRequest());\n    const response = await fetch(URL);\n    if (!response.ok) {\n      let errorResponse;\n      try {\n        errorResponse = await response.json();\n      } catch (error) {\n        errorResponse = { message: \"Algo salio Mal\" };\n      }\n      throw errorResponse;\n    }\n    const pokemon = await response.json();\n    dispatch(searchPokemonSuccess(pokemon));\n  } catch (error) {\n    dispatch(searchPokemonFailure(error));\n  }\n};\n\nexport const filterTypes = (type) => (dispatch) => {\n  dispatch({\n    type: FILTER_TYPES,\n    payload: type,\n  });\n};\n\nexport function sortOrder(order) {\n  return function (dispatch) {\n    dispatch({\n      type: SORT_ORDER,\n      payload: order,\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}