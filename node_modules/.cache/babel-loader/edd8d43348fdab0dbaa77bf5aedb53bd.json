{"ast":null,"code":"//PAGINACION\n//TOTAL DE PAGINAS\nconst totalPages = (array, num) => Math.ceil(array.length / num);\n//PAGINA ACTUAL\nlet currentPage = state => Math.ceil(state / totalPages) + 1;\n\n/* export const tipos = (type, array) => {\n  if (array.length && type) return array.filter((p) => p.tipos.includes(type));\n  else return [];\n};\n\nexport const sortOrder = (order, array) => {\n  let nombres = array.map((e) => e.name);\n  let fuerza = array.map((e) => e.fuerza);\n\n  const sortPorNombre = (array, getter, order = \"asc\") => {\n    array.sort((a, b) => {\n      const first = getter(a);\n      const second = getter(b);\n      const compare = first.localeCompare(second);\n      return order === \"asc\" ? compare : -compare;\n    });\n    return array;\n  };\n\n  switch (order) {\n    case \"a-z\":\n      return sortPorNombre(nombres, (nombres) => nombres.name);\n    case \"z-a\":\n      return sortPorNombre(nombres, (nombres) => nombres.name).reverse();\n    case \"fuerza+\":\n      return fuerza.sort((a, b) => b - a);\n    case \"fuerza-\":\n      return fuerza.sort((a, b) => a - b);\n    default:\n      return array;\n  }\n};\n/* \nexport const tipos = (type, array) => {\n  if (array.length) return array.filter((p) => p.type.includes(type));\n  return [];\n};\n\nexport const ordered = (order, array) => {\n  let names = array.map((o) => o.name);\n  let fuerza = array.map((o) => o.fuerza);\n  let orde = [];\n\n  switch (order) {\n    case \"a-z\":\n      names = names.sort();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"z-a\":\n      names = names.sort().reverse();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"fuerza+\":\n      fuerza = fuerza.sort((a, b) => b - a);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    case \"fuerza-\":\n      fuerza = fuerza.sort((a, b) => a - b);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    default:\n      return array;\n  }\n};\n */","map":{"version":3,"names":["totalPages","array","num","Math","ceil","length","currentPage","state"],"sources":["/home/cristian/Escritorio/PI-Pokemon-main/client/src/assets/utils/utils.js"],"sourcesContent":["//PAGINACION\n//TOTAL DE PAGINAS\nconst totalPages =(array, num) => Math.ceil(array.length / num);\n//PAGINA ACTUAL\nlet currentPage =(state)=> Math.ceil(state / totalPages) + 1;\n\n\n\n\n/* export const tipos = (type, array) => {\n  if (array.length && type) return array.filter((p) => p.tipos.includes(type));\n  else return [];\n};\n\nexport const sortOrder = (order, array) => {\n  let nombres = array.map((e) => e.name);\n  let fuerza = array.map((e) => e.fuerza);\n\n  const sortPorNombre = (array, getter, order = \"asc\") => {\n    array.sort((a, b) => {\n      const first = getter(a);\n      const second = getter(b);\n      const compare = first.localeCompare(second);\n      return order === \"asc\" ? compare : -compare;\n    });\n    return array;\n  };\n\n  switch (order) {\n    case \"a-z\":\n      return sortPorNombre(nombres, (nombres) => nombres.name);\n    case \"z-a\":\n      return sortPorNombre(nombres, (nombres) => nombres.name).reverse();\n    case \"fuerza+\":\n      return fuerza.sort((a, b) => b - a);\n    case \"fuerza-\":\n      return fuerza.sort((a, b) => a - b);\n    default:\n      return array;\n  }\n};\n/* \nexport const tipos = (type, array) => {\n  if (array.length) return array.filter((p) => p.type.includes(type));\n  return [];\n};\n\nexport const ordered = (order, array) => {\n  let names = array.map((o) => o.name);\n  let fuerza = array.map((o) => o.fuerza);\n  let orde = [];\n\n  switch (order) {\n    case \"a-z\":\n      names = names.sort();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"z-a\":\n      names = names.sort().reverse();\n      names.forEach((p) => {\n        array.forEach((po) => {\n          if (p === po.name) orde.push(po);\n        });\n      });\n      return orde;\n    case \"fuerza+\":\n      fuerza = fuerza.sort((a, b) => b - a);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    case \"fuerza-\":\n      fuerza = fuerza.sort((a, b) => a - b);\n      fuerza.forEach((f) => {\n        array.forEach((p) => {\n          if (p.fuerza === f) orde.push(p);\n        });\n      });\n      orde = orde.filter((e, i) => orde.indexOf(e) === i);\n      return orde;\n    default:\n      return array;\n  }\n};\n */\n"],"mappings":"AAAA;AACA;AACA,MAAMA,UAAU,GAAEA,CAACC,KAAK,EAAEC,GAAG,KAAKC,IAAI,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,GAAGH,GAAG,CAAC;AAC/D;AACA,IAAII,WAAW,GAAGC,KAAK,IAAIJ,IAAI,CAACC,IAAI,CAACG,KAAK,GAAGP,UAAU,CAAC,GAAG,CAAC;;AAK5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}